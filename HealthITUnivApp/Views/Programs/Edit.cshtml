@model HealthITUnivApp.Program

@{
    Layout = "~/Views/Shared/_LayoutIndex.cshtml";;
}


<div ng-controller="ProgramController">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            <h4>Program</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ProgramId)
            <div class="form-group">
                <label class="control-label col-md-2">University Name</label>
                <div class="col-md-10">
                    <select data-ng-model="university" class="btn btn-default dropdown-toggle"
                            data-ng-options="c.Text as c.Text for c in Universities" data-ng-change="updateCollege()">
                        <option value="">--Select University--</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">College Name</label>
                <div class="col-md-10">
                    <select name="CollegeName" data-ng-model="college" class="btn btn-default dropdown-toggle"
                            data-ng-options="c.CollegeName as c.CollegeName for c in Colleges" data-ng-change="updateDepartment()">
                        <option value="">--Select College--</option>
                    </select>
                    @*@Html.EditorFor(model => model.CollegeName, new { htmlAttributes = new { @class = "form-control",data_ng_model="college" } })*@
                    @Html.ValidationMessageFor(model => model.CollegeName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Department Name</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ProgramLeadDepartment, Enumerable.Empty<SelectListItem>(), "--Select Department--",
                                htmlAttributes: new { @class = "btn btn-default dropdown-toggle", data_ng_model = "department", data_ng_options = "c.DepartmentName as c.DepartmentName for c in Departments" })
                    @Html.ValidationMessageFor(model => model.ProgramLeadDepartment, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DepartmentName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DepartmentName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProgramName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProgramName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProgramName, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ProgramType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProgramType, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProgramType, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ProgramAbbrevation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProgramAbbrevation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProgramAbbrevation, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ProgramURL, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProgramURL, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProgramURL, "", new { @class = "text-danger" })
                </div>
            </div>
    
           <div class="form-group">
                @Html.LabelFor(model => model.ProgramHead, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProgramHead, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProgramHead, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Accredited, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Accredited, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Accredited, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Accredited_Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Accredited_Type, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Accredited_Type, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Accredited_StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Accredited_StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Accredited_StartDate, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Accredited_EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Accredited_EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Accredited_EndDate, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
<script type="text/javascript">

            var app = angular.module('MyApp', []);
            app.controller("ProgramController", function ($scope, $http) {


                $http.get("/Programs/getUnivs")
                .success(function (data, status, headers, config) {
                    $scope.Universities = data;

                });

                $http.get("/Programs/getColleges")
              .success(function (data, status, headers, config) {
                  $scope.Colleges = data.data;

              });

                $http.get("/Programs/getDepartments")
               .success(function (data, status, headers, config) {
                   $scope.Departments = data.data;

               });

                $http.get("/Programs/getCollegeAndUniv?ProgramId=" + $("#ProgramId").val())
               .success(function (data, status, headers, config) {
                   $scope.row = data[0];
                   $scope.university = $scope.row.UniversityName;
                   $scope.college = $scope.row.CollegeName;
                   $scope.department = $scope.row.ProgramLeadDepartment;
                   $scope.updateCollege();
                   $scope.updateDepartment();
               });

                $scope.updateCollege = function () {

                    $http.get('/Programs/getColleges?univName=' + $scope.university).
                       then(function (data, status, headers, config) {
                           $scope.Colleges = data.data;
                    });
                };
                $scope.updateDepartment = function () {

                    $http.get('/Programs/getDepartments?collegeName=' + $scope.college).
                       then(function (data, status, headers, config) {
                           $scope.Departments = data.data;
                       });
                };
            });
</script>
